"use client";
import React from "react";
import { AlertTriangle, CheckCircle, InfoIcon, XCircle, X } from "lucide-react"; // Renamed Info to InfoIcon to avoid conflict
import {
  Alert as ShadAlert,
  AlertDescription,
  AlertTitle,
} from "@/components/ui/alert"; // ShadCN UI Alert
import { cn } from "@/lib/utils";
import { Button } from "./button"; // Assuming you'll add button.tsx via shadcn

interface AlertProps {
  type: "success" | "error" | "warning" | "info";
  message: string;
  title?: string;
  onClose?: () => void;
  className?: string;
}

const alertVariants = {
  success: {
    icon: <CheckCircle size={20} className="text-green-500" />,
    titleClass: "text-green-500",
    variant: "default" as const, // Or a custom success variant if defined in alert.tsx
  },
  error: {
    icon: <XCircle size={20} className="text-destructive" />,
    titleClass: "text-destructive",
    variant: "destructive" as const,
  },
  warning: {
    icon: <AlertTriangle size={20} className="text-yellow-500" />,
    titleClass: "text-yellow-500",
    variant: "default" as const, // Or a custom warning variant
  },
  info: {
    icon: <InfoIcon size={20} className="text-blue-500" />,
    titleClass: "text-blue-500",
    variant: "default" as const, // Or a custom info variant
  },
};

const AlertComponent: React.FC<AlertProps> = ({
  type,
  message,
  title,
  onClose,
  className,
}) => {
  const config = alertVariants[type];

  if (!message) return null;

  return (
    <ShadAlert
      variant={config.variant}
      className={cn("relative animate-fade-in", className)}
    >
      <span className="mr-2 flex-shrink-0">{config.icon}</span>
      <div>
        {title && (
          <AlertTitle className={cn(config.titleClass, "font-semibold")}>
            {title}
          </AlertTitle>
        )}
        <AlertDescription className={title ? "mt-1" : ""}>
          {message}
        </AlertDescription>
      </div>
      {onClose && (
        <Button
          variant="ghost"
          size="icon"
          onClick={onClose}
          className="absolute top-2 right-2 h-6 w-6 p-0"
          aria-label="Close alert"
        >
          <X size={16} />
        </Button>
      )}
    </ShadAlert>
  );
};

export default AlertComponent;

// Ensure you have added the Alert component from ShadCN UI:
// npx shadcn-ui@latest add alert
// This command will create components/ui/alert.tsx (lowercase 'a')
//
// Content for components/ui/alert.tsx (generated by ShadCN):
// import * as React from "react"
// import { cva, type VariantProps } from "class-variance-authority"
//
// import { cn } from "@/lib/utils"
//
// const alertVariants = cva(
//   "relative w-full rounded-lg border p-4 [&>svg~*]:pl-7 [&>svg+div]:translate-y-[-3px] [&>svg]:absolute [&>svg]:left-4 [&>svg]:top-4 [&>svg]:text-foreground",
//   {
//     variants: {
//       variant: {
//         default: "bg-background text-foreground",
//         destructive:
//           "border-destructive/50 text-destructive dark:border-destructive [&>svg]:text-destructive",
//       },
//     },
//     defaultVariants: {
//       variant: "default",
//     },
//   }
// )
//
// const Alert = React.forwardRef<
//   HTMLDivElement,
//   React.HTMLAttributes<HTMLDivElement> & VariantProps<typeof alertVariants>
// >(({ className, variant, ...props }, ref) => (
//   <div
//     ref={ref}
//     role="alert"
//     className={cn(alertVariants({ variant }), className)}
//     {...props}
//   />
// ))
// Alert.displayName = "Alert"
//
// const AlertTitle = React.forwardRef<
//   HTMLParagraphElement,
//   React.HTMLAttributes<HTMLHeadingElement>
// >(({ className, ...props }, ref) => (
//   <h5
//     ref={ref}
//     className={cn("mb-1 font-medium leading-none tracking-tight", className)}
//     {...props}
//   />
// ))
// AlertTitle.displayName = "AlertTitle"
//
// const AlertDescription = React.forwardRef<
//   HTMLParagraphElement,
//   React.HTMLAttributes<HTMLParagraphElement>
// >(({ className, ...props }, ref) => (
//   <div
//     ref={ref}
//     className={cn("text-sm [&_p]:leading-relaxed", className)}
//     {...props}
//   />
// ))
// AlertDescription.displayName = "AlertDescription"
//
// export { Alert, AlertTitle, AlertDescription }
//
// Ensure you also have button.tsx:
// npx shadcn-ui@latest add button
