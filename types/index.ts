import type { User as SupabaseUser } from "@supabase/supabase-js";

export enum AIModel {
  GEMINI = "GEMINI",
  CHATGPT = "CHATGPT",
  CLAUDE = "CLAUDE",
  DEEPSEEK = "DEEPSEEK",
}

export interface Review {
  id?: string;
  model: AIModel;
  modelName: string;
  feedback: string | null;
  error: string | null;
  isLoading: boolean;
  tokensUsed?: number;
  projectId?: string;
  authorId?: string;
  content?: string;
  createdAt?: Date;
  updatedAt?: Date;
  reviewResults?: ReviewResult[];
}

export type ReviewResults = Partial<Record<AIModel, Review>>;

export interface AIModelOption {
  id: AIModel;
  name: string;
  isSimulated: boolean;
}

// Updated Profile interface with new fields for production
export interface Profile {
  id: string;
  email: string;
  username: string;
  profilePictureUrl?: string | null;
  bio?: string | null;
  role: "user" | "admin";
  isActive: boolean;
  lastLoginAt?: Date | null;
  onboardingCompleted: boolean;
  preferences: Record<string, any>;
  createdAt: Date;
  updatedAt: Date;
  projects?: Project[];
  reviews?: Review[];
  reviewResults?: ReviewResult[];
  teamMemberships?: TeamMember[];
  ownedTeams?: Team[];
  billingDetails?: BillingDetail;
  subscriptions?: Subscription[];
  apiKeys?: ApiKey[];
  notifications?: Notification[];
  conversations?: Conversation[];
  usageMetrics?: UsageMetrics[];
}

// Legacy alias for backwards compatibility
export interface UserProfile extends Profile {}

// AppUser can be a combination of Supabase's User object and our custom Profile data.
export interface AppUser extends SupabaseUser {
  profile?: Profile;
}

// This Project type should align with your Prisma schema for the 'Project' model.
export interface Project {
  id: string; // Typically a CUID or UUID generated by Prisma
  name: string;
  description?: string | null;
  repositoryUrl?: string | null;
  ownerId: string;
  owner?: Profile;
  reviews?: Review[];
  reviewResults?: ReviewResult[];
  teamId?: string | null;
  team?: Team | null;
  createdAt: Date;
  updatedAt: Date;
  settings?: ProjectSettings;
  code?: string; // Added to support code storage in projects for the reviewer page
}

export interface ProjectSettings {
  id: string;
  projectId: string;
  project?: Project;
  aiModel: string;
  codeLanguages: string[];
  reviewDepth: "basic" | "standard" | "comprehensive";
  autoReviewEnabled: boolean;
  createdAt: Date;
  updatedAt: Date;
}

export interface ReviewResult {
  id: string;
  reviewId: string;
  review?: Review;
  authorId: string;
  author?: Profile;
  projectId: string;
  project?: Project;
  fileName: string;
  filePath: string;
  codeSnippet: string;
  aiModel: string;
  suggestion: string;
  lineStart?: number | null;
  lineEnd?: number | null;
  severity: "info" | "warning" | "error";
  status: "open" | "fixed" | "ignored";
  fixedAt?: Date | null;
  fixedByUserId?: string | null;
  createdAt: Date;
  updatedAt: Date;
}

export interface Team {
  id: string;
  name: string;
  description?: string | null;
  ownerId: string;
  owner?: Profile;
  members?: TeamMember[];
  projects?: Project[];
  invitations?: Invitation[];
  createdAt: Date;
  updatedAt: Date;
}

export interface TeamMember {
  id: string;
  teamId: string;
  team?: Team;
  userId: string;
  user?: Profile;
  role: "owner" | "admin" | "member" | "viewer";
  joinedAt: Date;
  updatedAt: Date;
}

export interface Invitation {
  id: string;
  teamId: string;
  team?: Team;
  email: string;
  role: "admin" | "member" | "viewer";
  token: string;
  status: "pending" | "accepted" | "declined" | "expired";
  expiresAt: Date;
  createdAt: Date;
  updatedAt: Date;
}

export interface BillingDetail {
  id: string;
  profileId: string;
  profile?: Profile;
  companyName?: string | null;
  address?: string | null;
  city?: string | null;
  state?: string | null;
  zipCode?: string | null;
  country?: string | null;
  taxId?: string | null;
  createdAt: Date;
  updatedAt: Date;
}

export interface Subscription {
  id: string;
  profileId: string;
  profile?: Profile;
  planId: string;
  planName: string;
  status: "active" | "canceled" | "past_due" | "trialing";
  currentPeriodStart: Date;
  currentPeriodEnd: Date;
  cancelAtPeriodEnd: boolean;
  paymentMethod?: string | null;
  paymentId?: string | null;
  createdAt: Date;
  updatedAt: Date;
}

export interface ApiKey {
  id: string;
  profileId: string;
  profile?: Profile;
  name: string;
  key: string;
  lastUsed?: Date | null;
  expiresAt?: Date | null;
  createdAt: Date;
  updatedAt: Date;
}

export interface Notification {
  id: string;
  profileId: string;
  profile?: Profile;
  type: string;
  title: string;
  message: string;
  isRead: boolean;
  data?: unknown;
  createdAt: Date;
  updatedAt: Date;
}

// NavigationPage type might be more relevant for client-side routing if not using Next.js pages for everything.
export type NavigationPage =
  | "reviewer"
  | "profile"
  | "projects"
  | "teams"
  | "billing"
  | "login";

// ReviewResultStats is used for project statistics
export interface ReviewResultStats {
  totalResults: number;
  openCount: number;
  fixedCount: number;
  ignoredCount: number;
  severityCounts: {
    info: number;
    warning: number;
    error: number;
  };
  fileStats: Array<{
    fileName: string;
    count: number;
  }>;
}

// ActionResponse is a standardized structure for Server Action return values.
export interface ActionResponse<T = unknown> {
  success: boolean;
  message?: string; // Optional success or general message
  data?: T; // Optional data payload on success
  error?: string | { message: string; details?: unknown }; // Optional error message or object on failure
}

export interface Conversation {
  id: string;
  profileId: string;
  profile?: Profile;
  messages?: Message[];
  createdAt: Date;
  updatedAt: Date;
}

export interface Message {
  id: string;
  conversationId: string;
  conversation?: Conversation;
  text: string;
  senderId: string;
  sender?: Profile;
  createdAt: Date;
  updatedAt: Date;
}

export interface AnalyticsEvent {
  id: string;
  profileId: string;
  profile?: Profile;
  eventType: string;
  eventData: Record<string, any>;
  createdAt: Date;
  updatedAt: Date;
}

export interface UsageMetrics {
  id: string;
  profileId: string;
  profile?: Profile;
  metricType: string;
  metricValue: number;
  createdAt: Date;
  updatedAt: Date;
}
