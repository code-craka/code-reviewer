
import type { User as SupabaseUser } from '@supabase/supabase-js';

export enum AIModel {
  GEMINI = 'GEMINI',
  CHATGPT = 'CHATGPT',
  CLAUDE = 'CLAUDE',
  DEEPSEEK = 'DEEPSEEK',
}

export interface Review {
  id?: string;
  model: AIModel;
  modelName: string;
  feedback: string | null;
  error: string | null;
  isLoading: boolean;
  tokensUsed?: number;
  projectId?: string;
  authorId?: string;
  content?: string;
  createdAt?: Date;
  updatedAt?: Date;
  reviewResults?: ReviewResult[];
}

export type ReviewResults = Partial<Record<AIModel, Review>>;

export interface AIModelOption {
  id: AIModel;
  name: string;
  isSimulated: boolean;
}

// This UserProfile type represents the user profile data we store, typically in a 'profiles' table.
export interface UserProfile {
  id: string; // Should match Supabase auth.users.id
  username?: string | null;
  email?: string | null; // Typically the Supabase auth user's email
  profilePictureUrl?: string | null;
  bio?: string | null;
  createdAt?: Date;
  updatedAt?: Date;
  teamMemberships?: TeamMember[];
  ownedTeams?: Team[];
  billingDetails?: BillingDetail;
  subscriptions?: Subscription[];
}

// AppUser can be a combination of Supabase's User object and our custom UserProfile data.
export interface AppUser extends SupabaseUser {
  profile?: UserProfile; // Optional: embed our custom profile data for convenience
}

// This Project type should align with your Prisma schema for the 'Project' model.
export interface Project {
  id: string; // Typically a CUID or UUID generated by Prisma
  name: string;
  description?: string | null;
  repositoryUrl?: string | null;
  ownerId: string;
  owner?: UserProfile;
  reviews?: Review[];
  reviewResults?: ReviewResult[];
  teamId?: string | null;
  team?: Team | null;
  createdAt: Date;
  updatedAt: Date;
  settings?: ProjectSettings;
  code?: string; // Added to support code storage in projects for the reviewer page
}

export interface ProjectSettings {
  id: string;
  projectId: string;
  project?: Project;
  aiModel: string;
  codeLanguages: string[];
  reviewDepth: 'basic' | 'standard' | 'comprehensive';
  autoReviewEnabled: boolean;
  createdAt: Date;
  updatedAt: Date;
}

export interface ReviewResult {
  id: string;
  reviewId: string;
  review?: Review;
  authorId: string;
  author?: UserProfile;
  projectId: string;
  project?: Project;
  fileName: string;
  filePath: string;
  codeSnippet: string;
  aiModel: string;
  suggestion: string;
  lineStart?: number | null;
  lineEnd?: number | null;
  severity: 'info' | 'warning' | 'error';
  status: 'open' | 'fixed' | 'ignored';
  fixedAt?: Date | null;
  fixedByUserId?: string | null;
  createdAt: Date;
  updatedAt: Date;
}

export interface Team {
  id: string;
  name: string;
  description?: string | null;
  ownerId: string;
  owner?: UserProfile;
  members?: TeamMember[];
  projects?: Project[];
  invitations?: Invitation[];
  createdAt: Date;
  updatedAt: Date;
}

export interface TeamMember {
  id: string;
  teamId: string;
  team?: Team;
  userId: string;
  user?: UserProfile;
  role: 'owner' | 'admin' | 'member' | 'viewer';
  joinedAt: Date;
  updatedAt: Date;
}

export interface Invitation {
  id: string;
  teamId: string;
  team?: Team;
  email: string;
  role: 'admin' | 'member' | 'viewer';
  token: string;
  status: 'pending' | 'accepted' | 'declined' | 'expired';
  expiresAt: Date;
  createdAt: Date;
  updatedAt: Date;
}

export interface BillingDetail {
  id: string;
  profileId: string;
  profile?: UserProfile;
  companyName?: string | null;
  address?: string | null;
  city?: string | null;
  state?: string | null;
  zipCode?: string | null;
  country?: string | null;
  taxId?: string | null;
  createdAt: Date;
  updatedAt: Date;
}

export interface Subscription {
  id: string;
  profileId: string;
  profile?: UserProfile;
  planId: string;
  planName: string;
  status: 'active' | 'canceled' | 'past_due' | 'trialing';
  currentPeriodStart: Date;
  currentPeriodEnd: Date;
  cancelAtPeriodEnd: boolean;
  paymentMethod?: string | null;
  paymentId?: string | null;
  createdAt: Date;
  updatedAt: Date;
}

export interface ApiKey {
  id: string;
  profileId: string;
  profile?: UserProfile;
  name: string;
  key: string;
  lastUsed?: Date | null;
  expiresAt?: Date | null;
  createdAt: Date;
  updatedAt: Date;
}

export interface Notification {
  id: string;
  profileId: string;
  profile?: UserProfile;
  type: string;
  title: string;
  message: string;
  isRead: boolean;
  data?: any;
  createdAt: Date;
  updatedAt: Date;
}

// NavigationPage type might be more relevant for client-side routing if not using Next.js pages for everything.
export type NavigationPage = 'reviewer' | 'profile' | 'projects' | 'teams' | 'billing' | 'login';

// ActionResponse is a standardized structure for Server Action return values.
export interface ActionResponse<T = any> {
  success: boolean;
  message?: string; // Optional success or general message
  data?: T;         // Optional data payload on success
  error?: string | { message: string; details?: any }; // Optional error message or object on failure
}
